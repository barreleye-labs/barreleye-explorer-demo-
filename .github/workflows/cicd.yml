name:  Cypress Test and Docker Build/Push

on:
  push:
    branches:
      - develop


jobs:
  cypress-run:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.15.0'

      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - if: steps.npm-cache.outputs.cache-hit == 'true'
        run: echo 'npm cache hit!'
      - if: steps.npm-cache.outputs.cache-hit != 'true'
        run: echo 'npm cache missed!'
      - run: npm ci
      - name: Start the application
        run: npm run dev &
        env:
          CI: true

      - name: Run Cypress tests
        run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: cypress-run
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.USERNAME }}/${{ secrets.DOCKER_REPO }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


     

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Stop running container
            echo "Stopping running container..."
            sudo docker stop ${{ secrets.DOCKER_REPO }} || true
            
             # Remove containers based on image
            echo "Removing containers based on image..."
            CONTAINER_IDS=$(sudo docker ps -f "ancestor=${{ secrets.USERNAME }}/${{ secrets.DOCKER_REPO }}" --format "{{.ID}}")
            echo "Containers ID: $CONTAINER_IDS"
            if [ -n "$CONTAINER_IDS" ]; then
            sudo docker rm -f $CONTAINER_IDS
            fi
  
            # Remove the Docker image
            echo "Removing Docker image..."
            IMAGE_ID=$(sudo docker images --format "{{.ID}}" ${{ secrets.USERNAME }}/${{ secrets.DOCKER_REPO }})
            echo "Image ID: $IMAGE_ID"
            if [ -n "$IMAGE_ID" ]; then
            sudo docker rmi -f $IMAGE_ID
            echo "Deleted image with ID: $IMAGE_ID"
            else
            echo "No image found for ${{ secrets.USERNAME }}/${{ secrets.DOCKER_REPO }}"
            fi
            
            # Pull the latest Docker image
            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.USERNAME }}/${{ secrets.DOCKER_REPO }}
  
            # Execute the custom script
            echo "Executing custom script: barreleyescan.sh"
            sudo ./barreleyescan.sh
  
  
  
  
